import variables
import os
import json
from process_query import extract_note_info, retrieve_guideline, recalculate_dosages
from evaluation import evaluate_result
from guardrails import validate_doc_note

"""
Runs a series of testcase queries found in the list "test_filenames" through The OpenAI agent
pipeline and evaluates the correctness of the pipeline output each each.

It is assumed that there is only one vector store in the OpenAI account. If not,
the script halts with an error.

Format of a testcase json:
{"doc_note": string with doctor's note, 
 "obligatory_strings": list of strings which must occur in agent output e.g. "croup", "total patient dose 2.13 mg",
 "patients_weight": the patient's weight based on the doc_note expressed as a float. If absent, then 0.0
}

Pipeline:
1) Validate using OpenAI agent that the doctor's note in the test case is a valid doctor's note.
2) Query an agent, which uses the vector store and an LLM to find the most relevant treatment page. 
3) Recalculate any weight-dependent dosages found in (2)'s response to give exact amount based ono
   patient's weight. This uses my own logic, note an OpenAI agent. 
   Alternative: set an agent tool to be a python eval(equation).
"""


def main():

    test_filenames = ('example1.json', 'example2.json',
                      'example3.json', 'example4.json',
                      'example5.json', 'example6.json')
    eval_results = []

    for test_filename in test_filenames:
        print(f'**Processing test file: {test_filename}**')
        eval_result = {"filename": test_filename}

        test_case_path = os.path.join(variables.TEST_CASES_DIR, test_filename)
        test_case = json.load(open(test_case_path))

        doc_note = test_case['doc_note']

        # check that the doctor's note is in fact a valid doctor's note
        validation_result = validate_doc_note(doc_note)
        eval_result.update(validation_result)
        if validation_result['is_doc_note'] is False:
            print(f"{test_case_path} entered does not look like a doctor's note. "
                  f"{validation_result['is_doc_note_reasoning']}. Skipping.")
            eval_results.append({test_filename: eval_result})
            print('---------------\n')
            continue

        # pipeline to find the relevant guideline and calculate absolute drug dosages.
        extracted_note_info = extract_note_info(doc_note)
        result_text, files_found = retrieve_guideline(extracted_note_info)
        new_result_text = recalculate_dosages(result_text, extracted_note_info['patients_weight'])

        # save relevant clinical guideline generated by LLM
        output_path = os.path.join(variables.OUTPUT_DIR,
                                   test_filename.replace('.json', '.txt'))
        print(new_result_text, file=open(output_path, "w"))

        # calculate accuracy of generated guideline
        accuracy_result = evaluate_result(result_text=new_result_text,
                                          truth=test_case,
                                          extracted_note_info=extracted_note_info,
                                          files_found=files_found)
        eval_result.update(accuracy_result)

        eval_results.append(eval_result)
        print('---------------\n')

    with open(variables.EVAL_RESULTS_PATH, "w") as fout:
        json.dump(eval_results, fout, indent=4, ensure_ascii=False)


if __name__ == '__main__':
    main()
